name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up JDK 18
      uses: actions/setup-java@v3
      with:
        java-version: '18'
        distribution: 'temurin'

    - name: Grant execute permission for gradlew
      run: chmod +x ./spring_backend/gradlew

    - name: Run Gradle tests
      run: |
        cd spring_backend
        ./gradlew test

  test-frontend:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Install frontend dependencies
      run: |
        cd react_frontend
        yarn install --frozen-lockfile

    - name: Run frontend tests
      run: |
        cd react_frontend
        CI=true yarn test --passWithNoTests

  sonarqube:
    runs-on: ubuntu-latest
    needs: test-backend

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up JDK 18
      uses: actions/setup-java@v3
      with:
        java-version: '18'
        distribution: 'temurin'

    - name: Grant execute permission for gradlew
      run: chmod +x ./spring_backend/gradlew

    - name: SonarQube Scan
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        cd spring_backend
        ./gradlew sonar

  build-backend:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, sonarqube]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push backend
      uses: docker/build-push-action@v5
      with:
        context: ./spring_backend
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/uk223-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/uk223-backend:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/uk223-backend:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/uk223-backend:buildcache,mode=max

  build-frontend:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, sonarqube]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push frontend
      uses: docker/build-push-action@v5
      with:
        context: ./react_frontend
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/uk223-frontend:latest
          ${{ secrets.DOCKER_USERNAME }}/uk223-frontend:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/uk223-frontend:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/uk223-frontend:buildcache,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Deploy to server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: 2222
        script: |
          mkdir -p ~/uk223-deployment && cd ~/uk223-deployment
          cat > dc.yml << 'EOF'
          services:
            postgres:
              image: postgres:latest
              container_name: postgres_db
              environment:
                POSTGRES_USER: postgres
                POSTGRES_PASSWORD: postgres
                POSTGRES_DB: postgres
              volumes:
                - postgres_data:/var/lib/postgresql/data
              networks:
                - app-network
            backend:
              image: ${{ secrets.DOCKER_USERNAME }}/uk223-backend:latest
              container_name: spring-backend
              depends_on:
                - postgres
              environment:
                SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/postgres
                SPRING_DATASOURCE_USERNAME: postgres
                SPRING_DATASOURCE_PASSWORD: postgres
                SPRING_JPA_HIBERNATE_DDL_AUTO: update
                SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
              ports:
                - "8929:8080"
              networks:
                - app-network
            frontend:
              image: ${{ secrets.DOCKER_USERNAME }}/uk223-frontend:latest
              container_name: react-frontend
              depends_on:
                - backend
              ports:
                - "8928:80"
              networks:
                - app-network
          networks:
            app-network:
              driver: bridge
          volumes:
            postgres_data:
          EOF
          docker pull ${{ secrets.DOCKER_USERNAME }}/uk223-backend:latest
          docker pull ${{ secrets.DOCKER_USERNAME }}/uk223-frontend:latest
          docker stop postgres_db spring-backend react-frontend 2>/dev/null || true
          docker rm postgres_db spring-backend react-frontend 2>/dev/null || true
          docker compose -f dc.yml up -d
          docker ps

  celebrate:
    runs-on: ubuntu-latest
    needs: deploy
    if: success()

    steps:
    - name: Wish you a nice weekend
      run: |
        echo "ðŸŽ‰ Deployment successful!"
        echo "ðŸš€ Your application is now live!"
        echo "ðŸ˜Š Have a nice weekend!"
